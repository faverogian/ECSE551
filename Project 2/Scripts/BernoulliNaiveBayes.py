# -*- coding: utf-8 -*-
"""BernouilliNaiveBayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VYd7Xr2kJfmCoi-xjJGWQGHdbkGMKnrj
"""

import numpy as np
from sklearn.base import BaseEstimator, ClassifierMixin
from sklearn.feature_selection import SelectFromModel

class BernoulliNaiveBayes(BaseEstimator, ClassifierMixin):

    def __init__(self, alpha = 1.0):

        #Laplace smoothing parameter
        self.alpha = alpha
        self._P_y = None
        self._P_x_y = None
        self._log_P_y = None
        self._log_P_x_y = None
        self._log_P_x_y_inv = None
        return

    def fit(self, X, y):

        nb_classes = len(np.unique(y))
        nb_features = X.shape[1]

        # Occurrences for each label
        y_occ = np.unique(y, return_counts=True)[1]

        # Calculate P(y)
        self._P_y = y_occ / y_occ.sum()
        #Log-likelihood P(y)
        self._log_P_y = np.expand_dims(np.log(self._P_y), axis = 1)

        # Initializing P(x|y) array
        self._P_x_y = np.zeros([nb_classes, nb_features])

        # Loop through classes
        for i in range(nb_classes):

            # Count of feature within each classes
            Count_features = (X[(y == i), :].sum(axis = 0) + self.alpha)

            # Count the number of examples in each class
            Count_examples = (X[(y == i), :].shape[0] + 2 * self.alpha)

            # P(x|y) = P(x and y) / P(y)
            self._P_x_y[i, :] = Count_features / Count_examples

        # Log-likelihood P(x|y) and P(~x|y)
        self._log_P_x_y = np.log(self._P_x_y)
        self._log_P_x_y_inv = np.log(1 - self._P_x_y)

    def predict(self, X):

        log_likelihoods = self._log_P_y + self._log_P_x_y.dot(X.T) + self._log_P_x_y_inv.dot(1 - X.T)

        #Find class y that maximizes P(y|x)
        pred = np.argmax(log_likelihoods, axis = 0)

        #pred = np.array(pred).squeeze()
        return pred
    def get_params(self, deep=True):
        return {'alpha': self.alpha}

    def set_params(self, **parameters):
      for parameter, value in parameters.items():
        setattr(self, parameter, value)
      return self

